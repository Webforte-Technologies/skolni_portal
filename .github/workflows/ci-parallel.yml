name: CI/CD Pipeline - Parallel E2E

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '22.18.0'
  POSTGRES_VERSION: '15'

jobs:
  # Backend CI
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend linting
        working-directory: ./backend
        run: npm run lint

      - name: Run backend type checking
        working-directory: ./backend
        run: npx tsc --noEmit

      - name: Run backend tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: npm test

      - name: Build backend
        working-directory: ./backend
        run: npm run build

  # Frontend CI
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run frontend type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test:responsive

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Cache frontend build
        uses: actions/cache@v4
        with:
          path: frontend/dist
          key: frontend-build-${{ github.sha }}
          restore-keys: |
            frontend-build-

  # Parallel E2E Tests - Authentication
  e2e-auth:
    name: E2E Tests - Authentication
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Restore frontend build cache
        uses: actions/cache@v4
        with:
          path: frontend/dist
          key: frontend-build-${{ github.sha }}

      - name: Run Authentication E2E tests
        working-directory: ./frontend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: npm run test:e2e:auth

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-auth-results
          path: frontend/test-results/
          retention-days: 7

  # Parallel E2E Tests - Dashboard
  e2e-dashboard:
    name: E2E Tests - Dashboard
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Restore frontend build cache
        uses: actions/cache@v4
        with:
          path: frontend/dist
          key: frontend-build-${{ github.sha }}

      - name: Run Dashboard E2E tests
        working-directory: ./frontend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: npm run test:e2e:dashboard

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-dashboard-results
          path: frontend/test-results/
          retention-days: 7

  # Parallel E2E Tests - AI Generator
  e2e-ai-generator:
    name: E2E Tests - AI Generator
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Restore frontend build cache
        uses: actions/cache@v4
        with:
          path: frontend/dist
          key: frontend-build-${{ github.sha }}

      - name: Run AI Generator E2E tests
        working-directory: ./frontend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: npm run test:e2e:ai-generator

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-ai-generator-results
          path: frontend/test-results/
          retention-days: 7

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          npm ci --prefix backend
          npm ci --prefix frontend

      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          npm audit --audit-level moderate --prefix backend
          npm audit --audit-level moderate --prefix frontend

  # Build and deploy (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, e2e-auth, e2e-dashboard, e2e-ai-generator, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install all dependencies
        run: npm run install:all

      - name: Build all packages
        run: npm run build

      - name: Create Coolify deployment package
        run: |
          mkdir -p deployment/backend deployment/frontend
          
          # Backend build artifacts
          cp -r backend/dist deployment/backend/
          cp backend/Dockerfile deployment/backend/
          cp backend/package*.json deployment/backend/
          
          # Frontend build artifacts
          cp -r frontend/dist deployment/frontend/
          cp frontend/Dockerfile deployment/frontend/
          cp frontend/nginx.conf deployment/frontend/ 2>/dev/null || echo "No nginx.conf found"
          
          # Docker Compose for Coolify
          if [ -f "docker-compose.yml" ]; then
            cp docker-compose.yml deployment/
          else
            # Create Coolify-optimized docker-compose.yml
            echo "version: '3.8'" > deployment/docker-compose.yml
            echo "services:" >> deployment/docker-compose.yml
            echo "  backend:" >> deployment/docker-compose.yml
            echo "    build:" >> deployment/docker-compose.yml
            echo "      context: ./backend" >> deployment/docker-compose.yml
            echo "      dockerfile: Dockerfile" >> deployment/docker-compose.yml
            echo "    ports:" >> deployment/docker-compose.yml
            echo '      - "3001:3001"' >> deployment/docker-compose.yml
            echo "    environment:" >> deployment/docker-compose.yml
            echo "      - NODE_ENV=production" >> deployment/docker-compose.yml
            echo "      - PORT=3001" >> deployment/docker-compose.yml
            echo "    restart: unless-stopped" >> deployment/docker-compose.yml
            echo "    healthcheck:" >> deployment/docker-compose.yml
            echo '      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]' >> deployment/docker-compose.yml
            echo "      interval: 30s" >> deployment/docker-compose.yml
            echo "      timeout: 10s" >> deployment/docker-compose.yml
            echo "      retries: 3" >> deployment/docker-compose.yml
            echo "" >> deployment/docker-compose.yml
            echo "  frontend:" >> deployment/docker-compose.yml
            echo "    build:" >> deployment/docker-compose.yml
            echo "      context: ./frontend" >> deployment/docker-compose.yml
            echo "      dockerfile: Dockerfile" >> deployment/docker-compose.yml
            echo "    ports:" >> deployment/docker-compose.yml
            echo '      - "80:80"' >> deployment/docker-compose.yml
            echo "    depends_on:" >> deployment/docker-compose.yml
            echo "      - backend" >> deployment/docker-compose.yml
            echo "    restart: unless-stopped" >> deployment/docker-compose.yml
            echo "    healthcheck:" >> deployment/docker-compose.yml
            echo '      test: ["CMD", "curl", "-f", "http://localhost:80"]' >> deployment/docker-compose.yml
            echo "      interval: 30s" >> deployment/docker-compose.yml
            echo "      timeout: 10s" >> deployment/docker-compose.yml
            echo "      retries: 3" >> deployment/docker-compose.yml
          fi
          
          # Create Coolify deployment script
          echo '#!/bin/bash' > deployment/deploy.sh
          echo 'echo "🚀 Deploying to Coolify..."' >> deployment/deploy.sh
          echo 'echo "📦 Backend and Frontend built successfully"' >> deployment/deploy.sh
          echo 'echo "🐳 Docker containers ready for deployment"' >> deployment/deploy.sh
          echo 'echo "🔗 Use this package in Coolify dashboard"' >> deployment/deploy.sh
          echo 'echo "📋 Remember to set environment variables in Coolify"' >> deployment/deploy.sh
          chmod +x deployment/deploy.sh
          
          # Create deployment info
          echo "# 🚀 EduAI-Asistent Deployment Package" > deployment/DEPLOYMENT_INFO.md
          echo "" >> deployment/DEPLOYMENT_INFO.md
          echo "## 📅 Build Information" >> deployment/DEPLOYMENT_INFO.md
          echo "- **Build Date**: $(date)" >> deployment/DEPLOYMENT_INFO.md
          echo "- **Git Commit**: ${{ github.sha }}" >> deployment/DEPLOYMENT_INFO.md
          echo "- **Branch**: ${{ github.ref_name }}" >> deployment/DEPLOYMENT_INFO.md
          echo "- **Version**: $(node -p "require('./package.json').version")" >> deployment/DEPLOYMENT_INFO.md
          echo "" >> deployment/DEPLOYMENT_INFO.md
          echo "## 🐳 Services" >> deployment/DEPLOYMENT_INFO.md
          echo "1. **Backend** - Node.js API server (port 3001)" >> deployment/DEPLOYMENT_INFO.md
          echo "2. **Frontend** - React SPA served by Nginx (port 80)" >> deployment/DEPLOYMENT_INFO.md
          echo "" >> deployment/DEPLOYMENT_INFO.md
          echo "## 🔧 Coolify Deployment Steps" >> deployment/DEPLOYMENT_INFO.md
          echo "1. Upload this package to Coolify" >> deployment/DEPLOYMENT_INFO.md
          echo "2. Set environment variables (see .env.example files)" >> deployment/DEPLOYMENT_INFO.md
          echo "3. Deploy using the docker-compose.yml" >> deployment/DEPLOYMENT_INFO.md
          echo "4. Configure domain and SSL in Coolify" >> deployment/DEPLOYMENT_INFO.md
          echo "" >> deployment/DEPLOYMENT_INFO.md
          echo "## 📁 Package Contents" >> deployment/DEPLOYMENT_INFO.md
          echo "- \`backend/\` - Backend build artifacts, Dockerfile, and package files" >> deployment/DEPLOYMENT_INFO.md
          echo "- \`frontend/\` - Frontend build artifacts, Dockerfile, and nginx config" >> deployment/DEPLOYMENT_INFO.md
          echo "- \`docker-compose.yml\` - Multi-service deployment" >> deployment/DEPLOYMENT_INFO.md
          echo "- \`deploy.sh\` - Deployment helper script" >> deployment/DEPLOYMENT_INFO.md
          echo "- \`DEPLOYMENT_INFO.md\` - This file" >> deployment/DEPLOYMENT_INFO.md
          echo "" >> deployment/DEPLOYMENT_INFO.md
          echo "## 🚨 Important Notes" >> deployment/DEPLOYMENT_INFO.md
          echo "- Ensure PostgreSQL database is configured" >> deployment/DEPLOYMENT_INFO.md
          echo "- Set JWT_SECRET and other sensitive environment variables" >> deployment/DEPLOYMENT_INFO.md
          echo "- Configure CORS settings for your domain" >> deployment/DEPLOYMENT_INFO.md
          echo "- Set up proper SSL certificates" >> deployment/DEPLOYMENT_INFO.md
          
          # Create archive
          tar -czf deployment.tar.gz deployment/
          
          echo "📦 Coolify deployment package created successfully!"
          echo "📁 Contents:"
          ls -la deployment/

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 30

      - name: Notify deployment success
        run: |
          echo "🚀 Deployment package created successfully!"
          echo "📦 Artifact: deployment-package"
          echo "🔗 Branch: ${{ github.ref_name }}"
          echo "🏷️  Commit: ${{ github.sha }}"
